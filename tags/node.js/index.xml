<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on Gopherzhang</title>
    <link>https://driverzhang.github.io/tags/node.js/</link>
    <description>Recent content in Node.js on Gopherzhang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved 2016 - 2018</copyright>
    <lastBuildDate>Thu, 01 Mar 2018 19:21:50 +0000</lastBuildDate>
    
	<atom:link href="https://driverzhang.github.io/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Node.js之深入四个定时器</title>
      <link>https://driverzhang.github.io/post/node-js%E4%B9%8B%E6%B7%B1%E5%85%A5%E5%9B%9B%E4%B8%AA%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
      <pubDate>Thu, 01 Mar 2018 19:21:50 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/node-js%E4%B9%8B%E6%B7%B1%E5%85%A5%E5%9B%9B%E4%B8%AA%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;node-js之深入四个定时器&#34;&gt;Node.js之深入四个定时器&lt;/h1&gt;

&lt;h3 id=&#34;javascript-是单线程运行-异步操作特别重要&#34;&gt;JavaScript 是单线程运行，异步操作特别重要。&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Node 的异步语法比浏览器更复杂，因为它可以跟内核对话，不得不搞了一个专门的库 libuv 做这件事。这个库负责各种回调函数的执行时间，毕竟异步任务最后还是要回到主线程，一个个排队执行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js之node-xlsx模块</title>
      <link>https://driverzhang.github.io/post/node-js%E4%B9%8Bnode-xlsx%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 07 Feb 2018 22:55:45 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/node-js%E4%B9%8Bnode-xlsx%E6%A8%A1%E5%9D%97/</guid>
      <description>&lt;h1 id=&#34;nodejs包之node-xlsx&#34;&gt;Nodejs包之node-xlsx&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;支持读写Excel的node.js模块
1. node-xlsx: 基于Node.js解析excel文件数据及生成excel文件，仅支持xlsx格式文件；
2. excel-parser: 基于Node.js解析excel文件数据，支持xls及xlsx格式文件；
3. excel-export : 基于Node.js将数据生成导出excel文件，生成文件格式为xlsx；
4. node-xlrd: 基于node.js从excel文件中提取数据，仅支持xls格式文件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nodejs 之 File System 模块</title>
      <link>https://driverzhang.github.io/post/nodejs-%E4%B9%8B-file-system-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 13 Dec 2017 22:17:48 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/nodejs-%E4%B9%8B-file-system-%E6%A8%A1%E5%9D%97/</guid>
      <description>&lt;h1 id=&#34;nodejs-之-file-system-模块&#34;&gt;Nodejs 之 File System 模块&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;fs模块为nodejs的核心模块之一，主要处理文件的读写、复制、s删除、重命名等操作。当需要使用该模块时，需要先导入该文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>expressjs4.0之路由Router</title>
      <link>https://driverzhang.github.io/post/expressjs4-0%E4%B9%8B%E8%B7%AF%E7%94%B1router/</link>
      <pubDate>Fri, 24 Nov 2017 19:45:24 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/expressjs4-0%E4%B9%8B%E8%B7%AF%E7%94%B1router/</guid>
      <description>&lt;h1 id=&#34;express-router&#34;&gt;express.Router&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Express.js 4.0 有加入一個新的 Router 功能，它就像一個迷你的应用程序，可以让内部的路由改写更为方便，更具备弹性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;首先来看下express3-0版本的旧版路由定义的写法&#34;&gt;首先来看下express3.0版本的旧版路由定义的写法：&lt;/h2&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>promise与callback hell</title>
      <link>https://driverzhang.github.io/post/promise%E4%B8%8Ecallback-hell/</link>
      <pubDate>Tue, 07 Nov 2017 22:13:51 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/promise%E4%B8%8Ecallback-hell/</guid>
      <description>&lt;h1 id=&#34;callback-hell-和-promise-异步执行&#34;&gt;callback hell 和 promise 异步执行&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;nodejs的callback机制是比较烦人的，里面大部分方法是异步的，这个对于不熟悉的同学是非常麻烦的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>express、koa框架</title>
      <link>https://driverzhang.github.io/post/expresskoa%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Tue, 07 Nov 2017 22:06:58 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/expresskoa%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;h1 id=&#34;expres-koa-egg框架&#34;&gt;expres、koa、egg框架&lt;/h1&gt;

&lt;h2 id=&#34;express的中间件是什么&#34;&gt;express的中间件是什么？&lt;/h2&gt;

&lt;p&gt;中间件是一个可访问请求对象（req）和响应对象（res）的函数，在 Express 应用的请求-响应循环里，下一个内联的中间件通常用变量 next 表示。中间件的功能包括：
- 执行任何代码。
- 修改请求和响应对象。
- 终结请求-响应循环。
- 调用堆栈中的下一个中间件。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js之path模块</title>
      <link>https://driverzhang.github.io/post/node-js%E4%B9%8Bpath%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 07 Nov 2017 22:06:11 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/node-js%E4%B9%8Bpath%E6%A8%A1%E5%9D%97/</guid>
      <description>&lt;h1 id=&#34;node-js-之-path模块&#34;&gt;Node.js 之 Path模块&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;//引用该模块
&lt;/span&gt;&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#859900&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;path&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;1-path-normalize-路径解析-得到规范化的路径格式&#34;&gt;1. path.normalize 路径解析，得到规范化的路径格式&lt;/h3&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>exports和module exports</title>
      <link>https://driverzhang.github.io/post/exports%E5%92%8Cmodule-exports/</link>
      <pubDate>Tue, 07 Nov 2017 22:02:45 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/exports%E5%92%8Cmodule-exports/</guid>
      <description>&lt;h1 id=&#34;exports-和-module-exports&#34;&gt;exports 和 module exports&lt;/h1&gt;

&lt;h2 id=&#34;require-中路径-和-区别&#34;&gt;require 中路径 ./ 和 ../区别&lt;/h2&gt;

&lt;h4 id=&#34;这两种写法都是属于相对路径的使用符号&#34;&gt;这两种写法都是属于相对路径的使用符号&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&amp;rdquo;./&amp;ldquo;：代表与当前文件所在的目录。&lt;/li&gt;
&lt;li&gt;&amp;rdquo;../&amp;ldquo;：代表上一层目录。&lt;/li&gt;
&lt;li&gt;&amp;rdquo;/&amp;ldquo;：开头代表根目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>端口使用</title>
      <link>https://driverzhang.github.io/post/%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 07 Nov 2017 22:00:30 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;端口的使用&#34;&gt;端口的使用&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;讲个场景，银行当做服务器，银行里每一个窗口当做一个服务，每个窗口的服务内容不一样。你我他可以当做客户端，需要到窗口办事，但是我们每个人办的事情不一样，如果每个窗口服务没有一个编号表示对应的服务，你我他怎么知道要去哪个窗口办理业务。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>