<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>后端 on Gopherzhang</title>
    <link>https://driverzhang.github.io/tags/%E5%90%8E%E7%AB%AF/</link>
    <description>Recent content in 后端 on Gopherzhang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved 2016 - 2018</copyright>
    <lastBuildDate>Fri, 15 Jun 2018 19:48:18 +0000</lastBuildDate>
    
	<atom:link href="https://driverzhang.github.io/tags/%E5%90%8E%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GraphQl初探</title>
      <link>https://driverzhang.github.io/post/graphql%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Fri, 15 Jun 2018 19:48:18 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/graphql%E5%88%9D%E6%8E%A2/</guid>
      <description>&lt;h1 id=&#34;graphql初探&#34;&gt;GraphQL初探&lt;/h1&gt;

&lt;h2 id=&#34;1-什么是-graphql&#34;&gt;1.什么是 GraphQL ？&lt;/h2&gt;

&lt;h3 id=&#34;a-query-language-for-your-api&#34;&gt;A query language for your API&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.&lt;/p&gt;

&lt;p&gt;GraphQL 是 Facebook 在2012年创建、2015年形成规范的一种应用层查询语言&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js之node-xlsx模块</title>
      <link>https://driverzhang.github.io/post/node-js%E4%B9%8Bnode-xlsx%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 07 Feb 2018 22:55:45 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/node-js%E4%B9%8Bnode-xlsx%E6%A8%A1%E5%9D%97/</guid>
      <description>&lt;h1 id=&#34;nodejs包之node-xlsx&#34;&gt;Nodejs包之node-xlsx&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;支持读写Excel的node.js模块
1. node-xlsx: 基于Node.js解析excel文件数据及生成excel文件，仅支持xlsx格式文件；
2. excel-parser: 基于Node.js解析excel文件数据，支持xls及xlsx格式文件；
3. excel-export : 基于Node.js将数据生成导出excel文件，生成文件格式为xlsx；
4. node-xlrd: 基于node.js从excel文件中提取数据，仅支持xls格式文件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nodejs 之 File System 模块</title>
      <link>https://driverzhang.github.io/post/nodejs-%E4%B9%8B-file-system-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 13 Dec 2017 22:17:48 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/nodejs-%E4%B9%8B-file-system-%E6%A8%A1%E5%9D%97/</guid>
      <description>&lt;h1 id=&#34;nodejs-之-file-system-模块&#34;&gt;Nodejs 之 File System 模块&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;fs模块为nodejs的核心模块之一，主要处理文件的读写、复制、s删除、重命名等操作。当需要使用该模块时，需要先导入该文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>json web token</title>
      <link>https://driverzhang.github.io/post/json-web-token/</link>
      <pubDate>Fri, 24 Nov 2017 19:47:58 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/json-web-token/</guid>
      <description>&lt;h1 id=&#34;json-web-token-前后端总结&#34;&gt;json web token 前后端总结&lt;/h1&gt;

&lt;h2 id=&#34;一-关于-token-简介&#34;&gt;一. 关于 Token 简介&lt;/h2&gt;

&lt;h3 id=&#34;1-基于-token-的-web-后端认证机制&#34;&gt;1. 基于 Token 的 WEB 后端认证机制&lt;/h3&gt;

&lt;p&gt;几种常见的认证机制
&amp;gt;- HTTP Basic Auth&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>expressjs4.0之路由Router</title>
      <link>https://driverzhang.github.io/post/expressjs4-0%E4%B9%8B%E8%B7%AF%E7%94%B1router/</link>
      <pubDate>Fri, 24 Nov 2017 19:45:24 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/expressjs4-0%E4%B9%8B%E8%B7%AF%E7%94%B1router/</guid>
      <description>&lt;h1 id=&#34;express-router&#34;&gt;express.Router&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Express.js 4.0 有加入一個新的 Router 功能，它就像一個迷你的应用程序，可以让内部的路由改写更为方便，更具备弹性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;首先来看下express3-0版本的旧版路由定义的写法&#34;&gt;首先来看下express3.0版本的旧版路由定义的写法：&lt;/h2&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发与并行</title>
      <link>https://driverzhang.github.io/post/%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C/</link>
      <pubDate>Mon, 20 Nov 2017 11:18:13 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C/</guid>
      <description>&lt;h1 id=&#34;并发与并行区别&#34;&gt;并发与并行区别&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;先来一张5岁小孩都能看懂的图解释了并发与并行的区别&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>杂记总结</title>
      <link>https://driverzhang.github.io/post/%E6%9D%82%E8%AE%B0%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 20 Nov 2017 11:14:21 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/%E6%9D%82%E8%AE%B0%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;杂记总结&#34;&gt;杂记总结&lt;/h1&gt;

&lt;h2 id=&#34;1-项目框架-express-理解&#34;&gt;1. 项目框架 express 理解&lt;/h2&gt;

&lt;h3 id=&#34;1-1-express-response-有哪些方法&#34;&gt;1.1 express response 有哪些方法：&lt;/h3&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js之path模块</title>
      <link>https://driverzhang.github.io/post/node-js%E4%B9%8Bpath%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 07 Nov 2017 22:06:11 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/node-js%E4%B9%8Bpath%E6%A8%A1%E5%9D%97/</guid>
      <description>&lt;h1 id=&#34;node-js-之-path模块&#34;&gt;Node.js 之 Path模块&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;//引用该模块
&lt;/span&gt;&lt;span style=&#34;color:#93a1a1;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#859900&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;path&lt;/span&gt; = &lt;span style=&#34;color:#268bd2&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;1-path-normalize-路径解析-得到规范化的路径格式&#34;&gt;1. path.normalize 路径解析，得到规范化的路径格式&lt;/h3&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>exports和module exports</title>
      <link>https://driverzhang.github.io/post/exports%E5%92%8Cmodule-exports/</link>
      <pubDate>Tue, 07 Nov 2017 22:02:45 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/exports%E5%92%8Cmodule-exports/</guid>
      <description>&lt;h1 id=&#34;exports-和-module-exports&#34;&gt;exports 和 module exports&lt;/h1&gt;

&lt;h2 id=&#34;require-中路径-和-区别&#34;&gt;require 中路径 ./ 和 ../区别&lt;/h2&gt;

&lt;h4 id=&#34;这两种写法都是属于相对路径的使用符号&#34;&gt;这两种写法都是属于相对路径的使用符号&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&amp;rdquo;./&amp;ldquo;：代表与当前文件所在的目录。&lt;/li&gt;
&lt;li&gt;&amp;rdquo;../&amp;ldquo;：代表上一层目录。&lt;/li&gt;
&lt;li&gt;&amp;rdquo;/&amp;ldquo;：开头代表根目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>端口使用</title>
      <link>https://driverzhang.github.io/post/%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 07 Nov 2017 22:00:30 +0000</pubDate>
      
      <guid>https://driverzhang.github.io/post/%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;端口的使用&#34;&gt;端口的使用&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;讲个场景，银行当做服务器，银行里每一个窗口当做一个服务，每个窗口的服务内容不一样。你我他可以当做客户端，需要到窗口办事，但是我们每个人办的事情不一样，如果每个窗口服务没有一个编号表示对应的服务，你我他怎么知道要去哪个窗口办理业务。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>